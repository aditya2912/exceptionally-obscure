
-> #prefixing a variable with an underscore makes the variable a protected member of the class

-> #self is an instance of a class. Whereas __init__ can be called as a constructor of the same class in object oriented terminology. It gets called when the object of a class is made and it either initializes the data members of the class with the arguments of the __init__ function  or it sets the default values 
example ->
    class DummyClass ():
        def __init__(self):
            self.a = 1
            sefl.b = 2
            
    
    class AnotherClass():
        def __init__(self, value_for_a, value_for_b):
            self.a = value_for_a 
            self.b = value_for_b
            
            

#PROBLEM
#Find out the cost of a rectangular field with breadth(b=120), length(l=160). It costs x (2000) rupees per 1 square unit

class Rectangle():
    def __init__(self, length, breadth):
        self.length = length
        self.breadth = breadth 
        
    def return_area(self):
        return (self.length * self.breadth)
    
    def return_cost(self):
        rect_area = self.return_area()
        return (rect_area * 2000)
    
    
object = Rectangle(160, 120)
cost = object.return_cost()
print("Cost = ", cost)


          
-> The protected members of a class are those members which can only be accessed from within the class or from a class's Child class (in terms of inheritance). 
If we try to access the protected members outside of a class it would throw an error. As mentioned above, to declare a protected member for a classin Python, just prefix it with an underscore. 
    example 
     class Dummy():
        def __init__(self):
            self._a = "Bla Bla Bla"
            
CODE
    class BaseClass():
        def __init__(self):
            self._protected_member = 10
            
    class ChildClass(BaseClass):
        def __init__(self):
            BaseClass.__init__(self)
            print(self._protected_member)
            
    object = ChildClass()
    print(object._protected_member) // This line would give an error since we are trying to access the protected member outside of the class.
    
 SHALLOW COPY AND DEEP COPY -> 
 Lets say that we have the following two classes :-
    class Point(): 
        def __init__(self): 
            self.x = dummy_value
            self.y = dummy_value 

    class Rectangle(): 
        def __init__(self): 
            self.width = dummy_value
            self.height = dummy_value 
            self.corner = Point() 

In this case, if we try to make an object of Rectangle class, there would be a inner object Point inside of the rect class too. Now if we use the copy module and copy the first object into another object, the second object would have the same height and width values as the first object and also the corner attribute of the second object would point to the same memory reference of the corner member of the first object. This is what shallow copy is. The values are copied along with the references.

import copy 
rect = Rectangle() 
rect_2 = copy.copy(rect)

The problem which gets introduced here is that if somehow we changed the x, y values of the corner object in rect_2, then this would get reflected in rect too. 
For instance if i changed the x, y in corner of  rect_2 to 10, 20 (from 0,0),

rect_2.corner.x = 10 
rect_2.corner.y = 20

Then rect.corner.x would also show 10 and rect.corner.y would also show 20.

To solve this problem, we use the concept of deep copy.

Consider the following code :

import copy

class Point():
    def __init__(self, x_coord, y_coord):
        self.x = x_coord
        self.y = y_coord

class Rectangle():
    def __init__(self, width, height, *args):
        if len(args) is 0:
            (x_coord, y_coord) = (0, 0)
        else:
            (x_coord, y_coord) = args
        self.width = width
        self.height = height
        self.corner = Point(x_coord, y_coord)


rect = Rectangle(1, 2)
rect_2 = copy.copy(rect)
inner_object = rect.corner
new_inner = Point(0, 0)
new_inner = copy.copy(inner_object)

rect_2.corner = new_inner

inner_object_id = id(rect.corner)
inner_object_id_2 = id(rect_2.corner)

print((rect_2.width, rect_2.height, rect_2.corner))
print((rect.width, rect.height, rect.corner))
print(inner_object_id)
print(inner_object_id_2)


In the above case we are manually creating an object for Point class and manually copying the x, y values from rect.corner into this new object and assignig this new object to rect_2.corner.
So if the user changes the values x, y in rect_2.corner, then it would not be reflected in rect.corner
This is what deep copy is.


PURE FUNCTIONS -> 
    The functions which have no effect on the objects passed as parameters are pure functions. This means that whenever we pass an object as an argument to a function and the function does not mutate the state of that object, the function is termed as pure function.
    Consider the following scenario : 
        class Time(): 
            def __init__(self, hour , minutes, second): 
                self.hour = hour 
                self.minute = minutes
                self.seconds =  seconds 
                
                
     Now, lets create two objects of the Time class.
     time_1 = Time() 
     time_2 = Time() 
     
    Lets say there is a function add_time which takes the above 2 objects as arguments and adds the time from both these objects
    
    def add_time(time_1, time_2): 
        time_3 = Time() 
        time_3.hour = time_1.hour + time_2.hour 
        time_3.minutes = time_1.minutes + time_2.minutes
        time_3.seconds = time_1.seconds + time_2.seconds
        return time_3
        
     The above function does not mutate the state of time_1 or time_2. It creates a new object of time_3 Time class and initializes the values in time_3 with the values of time_1 and time_2 and returns the newly created object. So in this case, add_time is a pure function.
        
ENCAPSULATION -> 
        The process of encapsulating some lines of code into a function is called encapsulation.
        Or we can say that the process of putting some lines of code into a function is called encapsulation.
        Or Wrapping a piece of code intoa function ias called encapsulation.
        Its advantages are :- 
            Makes code more reusable. 
            It attaches a name to the code whoich kind of acts a documentation for the code


GENERALIZATION -> 
    The process of adding a parameter toi a function is called generalization. 
    In this way we are generalizing a function to different sets of paramter values. 
    for example -> 

    def add_function(10,20):
        return 10 + 20 

    Instead of the above definition of the add_function, we can generalize it by using variables in the arguments of the function

    def add_function(var_1 , var_2):
        return var_1 + var_2

LIST COMPREHENSION -> 
    Instead of writing for loops and if conditions to put items in a list, we can simply use list comprehension.
    It provides a very clean and succint way to initialize a list. 
    Code Example -> 
        dummy_list = [x for x in range(10)]
    
    The above example would give a list with values from 0 to 9 in it.
    In terms of code quality and cleanliness, list comprehension is a preferred way over the below approach for the above example.
    dummy_list = []
    for x in range(10):
        dummy_list = dummy_list.append(x)

    We can also use conditionals in List comprehension.
     even_numbers = [x for x in range(20) if x % 2 == 0]

     The above line returns a list of even numbers ranging from 0 to 20.

    We can also replicate if statements using list comprehension 
    replicate_list = [ x for x in range(100) if x % 3 == 0 if x % 5 == 0]

    The above code returns a list of numbers which are only divisibvle by 3 and 5 ranging from 0 to 100
    The above problem could also be solved by using the below code 

    replicate_list = [x for x in range(100) if x % 3 == 0 and x % 5 == 0 ]

    We can also use nested for loops in a list comprehension 
    nested_for_list = [x * y for x in range(4) for y in range(4)]
    // Lets hope the code is self explanatory

    
